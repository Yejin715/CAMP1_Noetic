#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import math
import tf
import os 
import cv2
from enum import Enum
from std_msgs.msg import UInt8, Float64, String
from sensor_msgs.msg import LaserScan, Image, CompressedImage
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from aicon_camp1_msgs.msg import MovingParam

class DetectContruction():
    def __init__(self):
        # subscribes state : white line reliability
        self.sub_construction_order = rospy.Subscriber('/detect/construction_order', UInt8, self.cbConstructionOrder, queue_size=1)
        self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.cbScanObstacle, queue_size=1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.pub_construction_return = rospy.Publisher('/detect/construction_stamped', UInt8, queue_size=1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
       
        self.StepOfConstruction = Enum('StepOfConstruction', 'searching_construction_sign find_obstacle motion_lf exit')
        self.is_obstacle_detected = False
        self.is_moving_complete = False

    def cbMovingComplete(self, data):
        self.is_moving_complete = True

    def cbConstructionOrder(self, order):
        msg_pub_construction_return = UInt8()

        if order.data == self.StepOfConstruction.searching_construction_sign.value:
            rospy.loginfo("begin")

            msg_pub_construction_return.data = self.StepOfConstruction.searching_construction_sign.value

        elif order.data == self.StepOfConstruction.find_obstacle.value:
            rospy.loginfo("find obstacle")

            while True:
                if self.is_obstacle_detected == True:

                    rospy.loginfo("Encounter obstacle")
                    msg_pub_construction_return.data = self.StepOfConstruction.find_obstacle.value
                    break
                else:
                    pass

        elif order.data == self.StepOfConstruction.motion_lf.value:

            rospy.sleep(1)

            # 1st turn
            rospy.loginfo("doing motion_lf")
            msg_moving = MovingParam()
            msg_moving.moving_type=2
            msg_moving.moving_value_angular=40
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            # 1st straight
            rospy.loginfo("doing motion_str")
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.28  #0.38
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            # 2st turn
            rospy.loginfo("doing motion_ri")
            msg_moving.moving_type=3
            msg_moving.moving_value_angular=50
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            # 2st straight
            rospy.loginfo("doing motion_str2")
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.3
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            # 3st turn
            rospy.loginfo("doing motion_ri")
            msg_moving.moving_type=3
            msg_moving.moving_value_angular=40
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            # 3st straight
            rospy.loginfo("doing motion_str2")
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.3
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)
            msg_pub_construction_return.data = self.StepOfConstruction.motion_lf.value        

        elif order.data == self.StepOfConstruction.exit.value:

            rospy.loginfo("construction finished")

            msg_pub_construction_return.data = self.StepOfConstruction.exit.value

        self.pub_construction_return.publish(msg_pub_construction_return)

    def cbScanObstacle(self, scan):
        # YDLidar(0 ~ 720 ea)
        # angle_degree = 90
        # angle_ea = int(angle_degree / 0.5)
        # scan_start = 360  - angle_ea
        # scan_end = 360 + angle_ea

        # LDS-02 Lidar(0 ~ 226 ea)
        angle_degree = 90
        angle_ea = int(angle_degree / 1.58)
        scan_start = 0 - angle_ea
        scan_end = 0 + angle_ea

        threshold_distance = 0.30
        is_obstacle_detected = False

        for i in range(scan_start, scan_end):
            if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.02:
                rospy.loginfo(scan.ranges[i])
                is_obstacle_detected = True

        self.is_obstacle_detected = is_obstacle_detected

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_contruction')
    node = DetectContruction()
    node.main()
