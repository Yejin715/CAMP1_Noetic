#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import math
import os
import cv2
from enum import Enum
from std_msgs.msg import UInt8
from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge, CvBridgeError

class DetectSign():
    def __init__(self):
        self.feature_detector = dict(SIFT = cv2.SIFT_create(), ORB = cv2.ORB_create(), brisk = cv2.BRISK_create(), akaze = cv2.AKAZE_create())
        self.detecting_type = 'ORB' # 'SIFT' or 'ORB' or 'brisk' or 'akaze'
        self.matching_type = 'bruteforce' # 'bruteforce' or 'flann'
        self.fnPreproc()

        self.sub_image_type = "raw" # you can choose image type "compressed", "raw"
        self.pub_image_type = "compressed" # you can choose image type "compressed", "raw"

        if self.sub_image_type == "compressed":
            # subscribes compressed image
            self.sub_image_original = rospy.Subscriber('/detect/image_input/compressed', CompressedImage, self.cbFindTrafficSign, queue_size = 1)
        elif self.sub_image_type == "raw":
            # subscribes raw image
            self.sub_image_original = rospy.Subscriber('/detect/image_input', Image, self.cbFindTrafficSign, queue_size = 1)

        self.pub_traffic_sign = rospy.Publisher('/detect/traffic_sign', UInt8, queue_size=1)

        if self.pub_image_type == "compressed":
            # publishes traffic sign image in compressed type 
            self.pub_image_traffic_sign = rospy.Publisher('/detect/image_output/compressed', CompressedImage, queue_size = 1)
        elif self.pub_image_type == "raw":
            # publishes traffic sign image in raw type
            self.pub_image_traffic_sign = rospy.Publisher('/detect/image_output', Image, queue_size = 1)

        self.cvBridge = CvBridge()

        self.TrafficSign = Enum('TrafficSign', 'divide stop intersection left right go construction')

        self.counter = 1

    def fnPreproc(self):
        # Initiate SIFT detector
        # self.sift = cv2.SIFT_create()
        self.sift = self.feature_detector[self.detecting_type]

        dir_path = os.path.dirname(os.path.realpath(__file__))
        dir_path = dir_path.replace('aicon_camp1_detect/nodes', 'aicon_camp1_detect/')
        dir_path += 'file/detect_sign/'

        self.img_stop = cv2.imread(dir_path + 'stop.png',0)
        self.img_intersection  = cv2.imread(dir_path + 'intersection.png',0)
        self.img_left  = cv2.imread(dir_path + 'left.png',0)
        self.img_right  = cv2.imread(dir_path + 'right.png',0)
        self.img_go  = cv2.imread(dir_path + 'go.png',0)
        self.img_construction  = cv2.imread(dir_path + 'construction.png',0)

        self.kp_stop, self.des_stop = self.sift.detectAndCompute(self.img_stop,None)

        self.kp_intersection, self.des_intersection  = self.sift.detectAndCompute(self.img_intersection, None)
        self.kp_left, self.des_left  = self.sift.detectAndCompute(self.img_left, None)
        self.kp_right, self.des_right  = self.sift.detectAndCompute(self.img_right, None)
        self.kp_go, self.des_go  = self.sift.detectAndCompute(self.img_go, None)
        self.kp_construction, self.des_construction  = self.sift.detectAndCompute(self.img_construction, None)

        # 매칭 알고리즘 선정
        if self.matching_type == 'bruteforce':
            self.flann = cv2.BFMatcher()
        elif self.matching_type == 'flann':
            if self.detecting_type == 'SIFT' or self.detecting_type == 'FAST':
                # SIFT 파라미터
                FLANN_INDEX_KDTREE = 0
                index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
                search_params = dict(checks=50)
            elif self.detecting_type == 'ORB' :
                # ORB 파라미터
                FLANN_INDEX_LSH = 6
                index_params= dict(algorithm = FLANN_INDEX_LSH, table_number = 6, key_size = 12, multi_probe_level = 1)
                search_params=dict(checks=32)
                
            self.flann = cv2.FlannBasedMatcher(index_params, search_params)

    def fnCalcMSE(self, arr1, arr2):
            squared_diff = (arr1 - arr2) ** 2
            sum = np.sum(squared_diff)
            num_all = arr1.shape[0] * arr1.shape[1] #cv_image_input and 2 should have same shape
            err = sum / num_all
            return err

    def cbFindTrafficSign(self, image_msg):
        # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
        if self.counter % 3 != 0:
            self.counter += 1
            return
        else:
            self.counter = 1

        if self.sub_image_type == "compressed":
            #converting compressed image to opencv image
            # np_arr = np.fromstring(image_msg.data, np.uint8)
            np_arr = np.frombuffer(image_msg.data, np.uint8)
            
            cv_image_input = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        elif self.sub_image_type == "raw":
            cv_image_input = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

        MIN_MATCH_COUNT = 5 # 9
        MIN_MSE_DECISION = 50000

        # find the keypoints and descriptors with SIFT
        kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)

        matches_stop = self.flann.knnMatch(des1,self.des_stop,k=2)
        matches_intersection = self.flann.knnMatch(des1,self.des_intersection,k=2)
        matches_left = self.flann.knnMatch(des1,self.des_left,k=2)
        matches_right = self.flann.knnMatch(des1,self.des_right,k=2)
        matches_go = self.flann.knnMatch(des1,self.des_go,k=2)
        matches_construction = self.flann.knnMatch(des1,self.des_construction,k=2)
      
        image_out_num = 1

        good_stop = []
        for m,n in matches_stop:
            if m.distance < 0.75*n.distance:
                good_stop.append(m)

        if len(good_stop)>MIN_MATCH_COUNT:
            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good_stop ]).reshape(-1,1,2)
            dst_pts = np.float32([ self.kp_stop[m.trainIdx].pt for m in good_stop ]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
            matches_stop = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)
            if mse < MIN_MSE_DECISION:
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.stop.value

                self.pub_traffic_sign.publish(msg_sign)

                rospy.loginfo("stop")
                image_out_num = 2

        else:
            matches_stop = None

        good_intersection = []
        for m,n in matches_intersection:
            if m.distance < 0.75*n.distance:
                good_intersection.append(m)
        if len(good_intersection)>MIN_MATCH_COUNT:
            src_pts = np.float32([kp1[m.queryIdx].pt for m in good_intersection ]).reshape(-1,1,2)
            dst_pts = np.float32([self.kp_intersection[m.trainIdx].pt for m in good_intersection]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
            matches_intersection = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)

            if mse < MIN_MSE_DECISION:
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.intersection.value

                self.pub_traffic_sign.publish(msg_sign)
                rospy.loginfo("intersection")

                image_out_num = 3
        else:
            matches_intersection = None

        good_left = []
        for m,n in matches_left:
            if m.distance < 0.75*n.distance:
                good_left.append(m)

        if len(good_left)>MIN_MATCH_COUNT:
            src_pts = np.float32([kp1[m.queryIdx].pt for m in good_left ]).reshape(-1,1,2)
            dst_pts = np.float32([self.kp_left[m.trainIdx].pt for m in good_left]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,7.0)
            matches_left = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)
            if mse < MIN_MSE_DECISION:
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.left.value

                self.pub_traffic_sign.publish(msg_sign)
                rospy.loginfo("left")

                image_out_num = 4
        else:
            matches_left = None

        good_right = []
        for m,n in matches_right:
            if m.distance < 0.75*n.distance:
                good_right.append(m)

        if len(good_right)>MIN_MATCH_COUNT:
            src_pts = np.float32([kp1[m.queryIdx].pt for m in good_right ]).reshape(-1,1,2)
            dst_pts = np.float32([self.kp_right[m.trainIdx].pt for m in good_right]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,7.0)
            matches_right = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)
            if mse < MIN_MSE_DECISION:
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.right.value

                self.pub_traffic_sign.publish(msg_sign)
                rospy.loginfo("right")

                image_out_num = 5
        else:
            matches_right = None

        good_go = []
        for m,n in matches_go:
            if m.distance < 0.75*n.distance:
                good_go.append(m)

        if len(good_go)>MIN_MATCH_COUNT:
            src_pts = np.float32([kp1[m.queryIdx].pt for m in good_go ]).reshape(-1,1,2)
            dst_pts = np.float32([self.kp_go[m.trainIdx].pt for m in good_go]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,10.0)
            matches_go = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)
            if mse < MIN_MSE_DECISION:
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.go.value

                self.pub_traffic_sign.publish(msg_sign)
                rospy.loginfo("go")

                image_out_num = 6
        else:
            matches_go = None

        good_construction = []
        for m,n in matches_construction:
            if m.distance < 0.75*n.distance:
                good_construction.append(m)

        if len(good_construction)>MIN_MATCH_COUNT:
            src_pts = np.float32([kp1[m.queryIdx].pt for m in good_construction ]).reshape(-1,1,2)
            dst_pts = np.float32([self.kp_construction[m.trainIdx].pt for m in good_construction]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
            matches_construction = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)
            if mse < MIN_MSE_DECISION:
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.construction.value

                self.pub_traffic_sign.publish(msg_sign)
                rospy.loginfo("construction")

                image_out_num = 7
        else:
            matches_construction = None
      
        if image_out_num == 1:
            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_input, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(cv_image_input, "bgr8"))

        elif image_out_num == 2:
            draw_params2 = dict(matchColor = (0,0,255), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_stop, # draw only inliers
                            flags = 2)

            final_stop = cv2.drawMatches(cv_image_input,kp1,self.img_stop,self.kp_stop,good_stop,None,**draw_params2)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final_stop, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_stop, "bgr8"))    

        elif image_out_num == 3:
            draw_params_intersection = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_intersection, # draw only inliers
                            flags = 2)

            final_intersection = cv2.drawMatches(cv_image_input,kp1,self.img_intersection,self.kp_intersection,good_intersection,None,**draw_params_intersection)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final_intersection, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_intersection, "bgr8"))

        elif image_out_num == 4:
            draw_params_left = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_left, # draw only inliers
                            flags = 2)

            fianl_left = cv2.drawMatches(cv_image_input,kp1,self.img_left,self.kp_left,good_left,None,**draw_params_left)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(fianl_left, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(fianl_left, "bgr8"))

        elif image_out_num == 5:
            draw_params_right = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_right, # draw only inliers
                            flags = 2)

            fianl_right = cv2.drawMatches(cv_image_input,kp1,self.img_right,self.kp_right,good_right,None,**draw_params_right)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(fianl_right, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(fianl_right, "bgr8"))

        elif image_out_num == 6:
            draw_params_go = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_go, # draw only inliers
                            flags = 2)

            final_go = cv2.drawMatches(cv_image_input,kp1,self.img_go,self.kp_go,good_go,None,**draw_params_go)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final_go, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_go, "bgr8"))

        elif image_out_num == 7:
            draw_params_construction = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_construction, # draw only inliers
                            flags = 2)

            final_construction = cv2.drawMatches(cv_image_input,kp1,self.img_construction,self.kp_construction,good_construction,None,**draw_params_construction)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final_construction, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_construction, "bgr8"))

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_sign')
    node = DetectSign()
    node.main()

