#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import math
import tf
import os 
from enum import Enum
from std_msgs.msg import UInt8, Float64, String
from geometry_msgs.msg import Twist
from aicon_camp1_msgs.msg import MovingParam

class ControlIntersection():
    def __init__(self):
   
        # subscribes state : white line reliability
        self.sub_intersection_order = rospy.Subscriber('/detect/intersection_order', UInt8, self.cbIntersectionOrder, queue_size=1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.sub_traffic_sign = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbInvokedByTrafficSign, queue_size=1)

        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
        self.pub_intersection_return = rospy.Publisher('/detect/intersection_stamped', UInt8, queue_size=1)
    
        self.StepOfIntersection = Enum('StepOfIntersection', 'detect_intersection_sign exit')
        self.TrafficSign = Enum('TrafficSign', 'divide stop intersection left right go construction')
        self.is_moving_complete = False
        self.is_intersection_detected = False
        self.is_left_detected = False
        self.is_right_detected = False
        self.is_go_detected = False

    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):
        if self.is_intersection_detected == True:
            if traffic_sign_type_msg.data == self.TrafficSign.left.value:
                rospy.loginfo("left detected")
                self.is_intersection_detected = False
                self.is_go_detected = False
                self.is_right_detected = False
                self.is_left_detected = True

            if traffic_sign_type_msg.data == self.TrafficSign.right.value:
                rospy.loginfo("right detected")
                self.is_intersection_detected = False
                self.is_left_detected = False
                self.is_go_detected = False
                self.is_right_detected = True

            if traffic_sign_type_msg.data == self.TrafficSign.go.value:
                rospy.loginfo("go detected")
                self.is_intersection_detected = False
                self.is_left_detected = False
                self.is_right_detected = False
                self.is_go_detected = True

    def cbMovingComplete(self, data):
        self.is_moving_complete = True
   
    def cbIntersectionOrder(self, order):
        msg_pub_intersection_return = UInt8()

        if order.data == self.StepOfIntersection.detect_intersection_sign.value:

            self.is_intersection_detected = True

            while True:
                if self.is_go_detected == True or self.is_left_detected == True or self.is_right_detected == True:
                    break

            if self.is_left_detected == True:

                rospy.loginfo("left go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=00
                msg_moving.moving_value_linear=0.6
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("left moving")
                msg_moving = MovingParam()
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=50
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                self.is_left_detected = False

                rospy.sleep(1)

            elif self.is_right_detected == True:

                rospy.loginfo("right go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=00
                msg_moving.moving_value_linear=0.6
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("right moving")
                msg_moving = MovingParam()
                msg_moving.moving_type=3
                msg_moving.moving_value_angular=50
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                self.is_right_detected = False

            elif self.is_go_detected == True:

                rospy.loginfo("go!go!go!")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=0
                msg_moving.moving_value_linear=0.4
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                self.is_go_detected = False

                rospy.sleep(1)

            rospy.loginfo("moving finished")
            msg_pub_intersection_return.data = self.StepOfIntersection.exit.value
                                      
        elif order.data == self.StepOfIntersection.exit.value:
           
            rospy.loginfo("Now finished")

            rospy.sleep(1)

            msg_pub_intersection_return.data = self.StepOfIntersection.exit.value

        self.pub_intersection_return.publish(msg_pub_intersection_return)
        rospy.loginfo("moving finished22222222222222222")


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_intersection')
    node = ControlIntersection()
    node.main()
